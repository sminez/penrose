searchState.loadedDescShard("penrose_ui", 0, "Penrose-ui: a bare bones toolkit for adding UI elements to …\nContains the error value\nError variants from penrose_ui library.\nCreation of a <code>Color</code> from a string hex code was invalid\nThe specified character can not be rendered by any font on …\nA string being passed to underlying C APIs contained an …\nContains the success value\nUnable to parse an integer from a provided string.\nAn error was returned from the <code>XConn</code> when interacting with …\nA Result where the error type is a penrose_ui <code>Error</code>\nUnable to allocate a requested color\nUnable to open a requested font\nUnable to open a font using an Xft font pattern\nUnable to parse an Xft font pattern\nAn attempt was made to work with a surface for a window …\nA lightweight and configurable status bar for penrose\nThe core <code>Draw</code> and <code>Context</code> structs for rendering UI …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA simple UI for view the results of a given Layout …\nCreate a default dwm style status bar that displays …\nThe invalid string that was intended as a color hex code\nThe window id requested\nBottom of the screen\nA group of Widgets and associated point size to use for …\nThe position of a status bar\nA simple text based status bar that renders a user defined …\nTop of the screen\nAdd this <code>StatusBar</code> into the given <code>WindowManager</code> along with …\nRun any widget event actions and then redraw if needed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRun any widget on_new_client actions and then redraw if …\nConstruct a new per-screen set of widgets with an …\nRe-render all widgets in this status bar for each screen …\nRun any widget refresh actions and then redraw if needed\nUtilities for running scheduled updates to widgets\nRun any widget startup actions and then redraw\nTry to initialise a new empty status bar. Can fail if we …\nTry to create a new status bar using a different …\nSelf rendering building blocks for text based UI elements\nThe minimum allowed interval for an UpdateSchedule.\nFor widgets that want to have their content updated …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruct a new UpdateSchedule specifying the interval …\nA text widget that shows the name of the currently focused …\nA text widget that shows the current layout name\nA simple widget that does not care about window manager …\nA simple widget that does not care about window manager …\nA text widget that is set via updating the root window …\nA simple piece of static text with an optional background …\nA status bar widget that can be rendered using a Context\nA simple workspace indicator for a status bar\nCurrent required width and height for this widget due to …\nWidgets for showing debug information about the current …\nRender the current state of the widget to the status bar …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBorrow the current contents of the widget.\nMutably borrow the current contents of the widget.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf true, this widget will expand to fill remaining …\nConstruct a new <code>RefreshText</code> using the specified styling …\nConstruct a new <code>IntervalText</code> using the specified styling …\nCreate a new RootWindowName widget\nCreate a new ActiveWindowName widget with a maximum …\nCreate a new CurrentLayout widget\nConstruct a new WorkspaceWidget\nConstruct a new Text\nAn event hook to be run in order to update this Widget\nA manage hook to be run in order to update this Widget\nA refresh hook to be run in order to update this Widget\nA startup hook to be run in order to initialise this Widget\nDoes this widget currently require re-rendering? (should …\nSet the rendered text and trigger a redraw\nSystem monitor widgets and utility functions\nAn UpdateSchedule to allow for external updates to this …\nA text widget that shows the Xid of the current client\nA text widget that shows a summary of the current Window …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new ActiveWindowId widget.\nCreate a new StateSummary widget.\nHelper functions for obtaining system information for use …\nSystem information widgets provided as [IntervalText] …\nSystem information widgets provided as [RefreshText] …\nParse the current volume as a percentage from amixer.\nThis finds the first battery (BAT) file it finds; so far …\nFetch the requested battery’s charge as a percentage of …\nFetch the current date and time in <code>YYYY-MM-DD HH:MM</code> format …\nFetch the active ESSID and associated signal quality for …\nDisplay the current volume level as reported by <code>amixer</code>\nDisplay the current charge level and status of a named …\nDisplay the current date and time in YYYY-MM-DD HH:MM …\nDisplay the ESSID currently connected to and the signal …\nDisplay the current volume level as reported by <code>amixer</code>\nDisplay the current charge level and status of a named …\nDisplay the current date and time in YYYY-MM-DD HH:MM …\nDisplay the ESSID currently connected to and the signal …\nA minimal drawing context for rendering text based UI …\nA minimal back end for rendering simple text based UIs.\nA set of styling options for a text string that is to be …\nThe background color for the region behind the text …\nClear the underlying surface, restoring it to the …\nGet access to the underlying XConn used by this Draw.\nRetrieve the drawing Context for the given window <code>Xid</code>.\nDestroy the specified window along with any surface and …\nRender a rectangular border using the supplied color.\nRender the provided text at the current context offset …\nThe foreground color to be used for rendering the text …\nFill the specified area with this Context’s background …\nRender a filled rectangle using the supplied color.\nRender a filled rectangle using the supplied color.\nFlush any pending requests to the X server and map the …\nFlush pending requests to the X server.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new Draw instance using the specified font and …\nCreate a new X window with an initialised surface for …\nPadding in pixels around the text to the left and right.\nSet future drawing operations to apply from the origin.\nSet the font being used for rendering text and clear the …\nSet future drawing operations to apply from a specified …\nSet an absolute x offset for future drawing operations.\nSet an absolute y offset for future drawing operations.\nDetermine the width and height taken up by a given string …\nOffset future drawing operations by an additional (dx, dy)\nA simple way to view the output of specific Layout …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruct a new LayoutViewer with a specified color scheme …\nRun a Layout for a given client stack and display the …\nShow the layout result for a set of Layouts using a given …")