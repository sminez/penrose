searchState.loadedDescShard("penrose", 0, "Penrose: a library for building your very own tiling …\nAn operation requiring the client to be on a screen was …\nA simple RGBA based color\nA custom error message from user code or extensions\nContains the error value\nError variants from the core penrose library.\nThere were not enough workspaces to cover the number of …\nData received as part of a client message had an invalid …\nAttempt to create a <code>Color</code> from an invalid hex string\nA window hints message was received but unable to be parsed\nData received from the X server when requesting a window …\nInvalid UTF8 encoded string\nIO error\nPenrose is running without any screens to connect to\nDuplicate tags were provided for one or more workspaces\nContains the success value\nParseIntError\nThere was a problem initialising randr\nA Result where the error type is a penrose Error\nAn operation was requested on a client window that is …\nA keybinding has been specified for an unknown key name …\nAn unknown character has been used to specify a modifier …\nAn unknown mouse button was pressed\nAn attempt was made to fetch a state extension for a type …\nAn error that occurred while connecting to an X11 server\nAn error that occurred on an already established X11 …\nAn error that occurred with some request.\nAn error caused by some request or by the exhaustion of …\nRepresentation of an X11 error packet that was sent by the …\nAn X11 ID for a given resource\n0xAARRGGBB representation of this Color\nRender this color as a #RRGGBB hew color string\nBuilt-in functionality for penrose.\nCore data structures and user facing functionality for the …\nQuickly create a crate::Error::Custom\nExtensions to the base behaviour of Penrose\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMark a type as being usable as a Message for sending to a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompose together a set of ManageHook query/hook rules into …\nMake creating a pre-defined HashMap a little less verbose\nCreate a new Color from a hex encoded u32: 0xRRGGBBAA\nSide effect free management of internal window manager …\nThe RGB information of this color as 0.0-1.0 range floats …\n0xRRGGBB representation of this Color (no alpha …\nThe RGBA information of this color as 0.0-1.0 range floats …\n0xRRGGBBAA representation of this Color\nQuickly define a LayoutTransformer from a single element …\nCreate a Stack containing the arguments. The only required …\nUtility functions for use in other parts of penrose\nLogic for interacting with the X server\nHelpers and utilities for using x11rb as a back end for …\nThe button ID that was pressed\nThe format received\nThe string that was used\nThe window that was queried\nNumber of connected screens\nNumber of provided workspaces\nThe name of the unknown key\nThe unrecognised modifier name\nThe name of the property that was queried\nWhy parsing failed\nThe set of non-unique tags\nThe type of property that was queried\nThe type ID of the type that was requested\nHelpers and pre-defined actions for use in user defined …\nBuilt-in hooks\nBuilt-in layouts.\nSend a message to all layouts available to the current …\nExit penrose\nActions for manipulating floating windows.\nConstruct a KeyEventHandler from a closure or free function\nInfo log the current window manager State for debugging …\nMutate the ClientSet and refresh the on screen state\nRemove the currently focused client from state and unmap …\nSend a message to the currently active layout\nSpawn an external program as part of a key binding\nA simple mouse event handler for dragging a window\nA simple mouse event handler for resizing a window\nConstruct a boxed MouseEventHandler trait object ready to …\nConstruct a boxed MouseEventHandler trait object ready to …\nFloat all windows in their current tiled position\nMove the currently focused window to the floating layer in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMove a currently floating window by a given (x, y) delta\nResize a currently floating window by a given (width, …\nSink all floating windows back into their tiled positions\nSink the current window back into tiling mode if it was …\nSink the current window if it was floating, float it if it …\nSimple gaps around the window placement of the enclosed …\nThe number of pixels to reserve at the bottom of the screen\nReturns the argument unchanged.\nThe desired inner gap size in pixels\nCalls <code>U::from(self)</code>.\nThe desired outer gap size in pixels\nThe number of pixels to reserve at the top of the screen\nA simple Layout with a main and secondary side regions.\nA simple grid layout that places windows in the smallest …\nA simple Layout with main and secondary regions.\nA simple monolce layout that gives the maximum available …\nCreate a new MainAndStack Layout with the main area on the …\nCreate a new MainAndStack Layout with a main area and the …\nCreate a new Monocle Layout as a boxed trait object\nCreate a new Grid Layout as a boxed trait object\nCreate a new default MainAndStack Layout as a trait object …\nCreate a new default CenteredMain Layout as a trait object …\nCreate a new rotated default MainAndStack Layout as a …\nCreate a new rotated default CenteredMain Layout as a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new CenteredMain Layout with a horizontal main …\nCreate a new CenteredMain Layout with a horizontal main …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilt-in layout messages.\nRotate the main axis of this layout\nRotate the main axis of this layout\nCreate a new MainAndStack Layout with the main area on the …\nCreate a new MainAndStack Layout with the main area on the …\nCreate a new MainAndStack Layout with the main area and …\nCreate a new MainAndStack Layout with the main area on the …\nBuilt-in layout transformers.\nCreate a new CenteredMain Layout with a vertical main area …\nCreate a new CenteredMain Layout with a vertical main area …\nExpand the size of the main area of the Layout.\nA Message sent when a Layout is no longer visible (e.g. …\nAlter the number of clients contained in the main area of …\nMirror the Layout over either the horizontal or vertical …\nRotate the Layout to a new orientation\nShrink the size of the main area of the Layout\nUnwrap a LayoutTransformer to return the underlying Layout.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSimple gaps around the window placement of the enclosed …\nWrap an existing layout and reflect its window positions …\nWrap an existing layout and reflect its window positions …\nReserve <code>px</code> pixels at the top of the screen.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe desired inner gap size in pixels\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe inner Layout having gaps applied to it.\nThe wrapped inner layout\nThe desired outer gap size in pixels\nThe number of pixels to reserve at the top of the screen\nWrap an existing layout with this transformer\nWrap an existing layout with this transformer\nWrap an existing Layout with the given gap sizes.\nWrap an existing Layout with the given reserved area.\nThe pure client state information for the window manager\nThe pure client state information for a single Workspace\nThe user specified config options for how the window …\nMutable internal state for the window manager\nA top level struct holding all of the state required to …\nAn X11 ID for a given resource\nAdd a typed State extension to this State.\nAdd a typed State extension to this WindowManager.\nSetting up and responding to user defined key/mouse …\nThe width in pixels to use for drawing window borders\nThe pure window manager state\nSet the event_hook or compose it with what is already set.\nSet the layout_hook or compose it with what is already set.\nSet the manage_hook or compose it with what is already set.\nSet the refresh_hook or compose it with what is already …\nSet the startup_hook or compose it with what is already …\nThe user defined configuration options for running the …\nThe event currently being processed.\nThe stack of layouts to use for each workspace\nA StateHook to run before processing each XEvent\nGet access to a shared state extension.\nGet access to a shared state extension or set it using …\nWindow classes that should always be assigned floating …\nWhether or not the mouse entering a new window should set …\nThe RGBA color to use for the focused window border\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTraits for writing and composing hooks.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLayouts for positioning client windows on the screen …\nA LayoutHook to run when positioning clients on the screen\nA ManageHook to run after each new window becomes managed …\nThe set of all client windows currently mapped to a screen.\nConstruct a new WindowManager with the provided config and …\nThe RGBA color to use for normal (unfocused) window borders\nA StateHook to run every time the on screen X state is …\nRemove a shared state extension entirely.\nThe Xid of the root window for the running WindowManager.\nStart the WindowManager and run it until told to exit.\nA StateHook to run before entering the main event loop\nThe mutable State of the window manager\nThe ordered set of workspace tags to use on window manager …\nAlt\nBackspace\nControl\nDelete\nDown\nEscape\nUser defined key bindings\nA key press and held modifiers\nA u16 X key-code bitmask\nA u8 X key-code enum value\nSome action to be run by a user key binding\nAbstraction layer for working with key presses\nLeft\n1\nMeta / super / windows\n2\nKnown modifier keys for bindings\nAn iterator over the variants of ModifierKey\nMouse motion with a held button and optional modifiers\nUser defined mouse bindings\nKnown mouse buttons for binding actions\nA mouse movement or button event\nData from a button press or motion-notify event\nAn action to be run in response to a mouse event\nThe types of mouse events represented by a MouseEvent\nA mouse state specification indicating the button and …\nPageDown\nPageUp\nA button was pressed\nA button was released\nReturn / enter key\nRight\n3\n5\n4\nShift\nTab\nUp\nA raw character key\nThe xcb button ID for this MouseState\nThe MouseButton being held\nCall this handler with the current window manager state\nConvert a KeyEventHandler to a MouseEventHandler that runs …\nThe key code that was held\nThe details of which window the event applies to and where …\nThe details of which window the event applies to and where …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse raw mouse state values into a MouseState\nThe ID of the window that was contained the click\nCreate a new KeyCode from this one that removes the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRun the xmodmap command to dump the system keymap table.\nWas this press or release\nThe xcb bitmask for this MouseState\nThe held modifier mask\nAll ModifierKeys being held\nAll ModifierKeys being held\nConstruct a new MouseState\nConstruct a new MouseEvent from raw data\nConstruct a new MotionNotifyEvent from raw data\nCalled when the ModifierKeys associated with this handler …\nCalled when the MouseState associated with this handler is …\nParse string format key bindings into KeyCode based …\nAbsolute coordinate of the event\nThe modifier and button code that was received\nCoordinate of the event relative to top-left of the window …\nThe result of composing two event hooks using <code>then</code>\nThe result of composing two state hooks using <code>then</code>\nThe result of composing two manage hooks using <code>then</code>\nThe result of composing two state hooks using <code>then</code>\nHandle an XEvent, return <code>true</code> if default event handling …\nLogic to run before and after laying out clients\nAction to run when a new client becomes managed.\nAn arbitrary action that can be run and modify State\nConvert to a trait object\nConvert to a trait object\nConvert to a trait object\nConvert to a trait object\nRun this hook\nRun this hook\nRun this hook\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompose this hook with another EventHook. The second hook …\nCompose this hook with another ManageHook.\nCompose this hook with another StateHook.\nCompose this hook with another LayoutHook.\nCompose this hook with a boxed EventHook. The second hook …\nCompose this hook with a boxed ManageHook.\nCompose this hook with a boxed StateHook.\nCompose this hook with a boxed LayoutHook.\nOptionally modify the screen dimensions being given to a …\nOptionally modify the screen dimensions being given to a …\nOptionally modify the client positions returned by a Layout\nOptionally modify the client positions returned by a Layout\nMarker trait for a type that can be sent as a Message.\nA Layout is responsible for positioning a Stack of clients …\nA stack of Layout options for use on a particular …\nA wrapper round another Layout that is able to intercept …\nA dynamically typed message to be sent to a Layout for …\nConvert to a trait object.\nProvide a clone of this Layout wrapped as a trait object. …\nSend the given Message to every Layout in this stack …\nCheck to see whether this Message is a particular type\nReturns the argument unchanged.\nProcess a dynamic Message.\nSend the given Message to the currently active Layout.\nProvide a mutable reference to the Layout wrapped by this …\nCalls <code>U::from(self)</code>.\nWrap this value as a dynamically typed message for sending …\nWrap this value as a dynamically typed message for sending …\nGenerate screen positions for clients from a given Stack.\nGenerate screen positions for an empty Stack.\nGenerate screen positions for clients on a given …\nA short display name for this Layout, appropriate for …\nPass a message on to the wrapped inner Layout.\nPass a message on to the wrapped inner Layout.\nRun the currently focused Layout and return the positions …\nApply the LayoutTransformer to its wrapped inner Layout.\nApply the LayoutTransformer to its wrapped inner Layout.\nReplace the currently wrapped Layout with a new one.\nReplace the currently wrapped Layout with a new one.\nModify the initial Rect that will be passed to the inner …\nModify the initial Rect that will be passed to the inner …\nOptionally modify any of the positions returned by the …\nOptionally modify any of the positions returned by the …\nThe same as Layout::name but for LayoutTransformer itself.\nRemove the inner Layout from this LayoutTransformer.\nRemove the inner Layout from this LayoutTransformer.\nHelpers and pre-defined actions for use in user defined …\nHook implementations and helpers for adding to your …\nLayout behaviour that is more specialised or complex than …\nUtility extensions for use in the penrose window manager\nForce the window into fullscreen state\nThe possible valid actions to use when manipulating full …\nForce the window out of fullscreen state\nToggle the fullscreen state of the window\nJump to, or create a Workspace.\nUse DMenu to dynamically select and focus a client window.\nUse DMenu to dynamically select and focus a client window.\nFocus a client with the given class as <code>WM_CLASS</code> or spawn …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLaunch DMenu for its most basic purposes, launching other …\nSet the fullscreen state of a particular client\nJump to a Workspace by name.\nToggle the fullscreen state of the currently focused …\nConfigure workspaces to auto-spawn a set of windows if …\nEWMH compliance for Penrose\nManage hooks for common manage actions\nSupport for managing multiple floating scratchpad programs …\nStartup hooks for direct adding to your penrose config.\nWindow swallowing in the style of …\nSpecify a workspace by <code>tag</code> and use a named layout to spawn …\nCreate a new boxed <code>DefaultWorkspace</code> that can be added to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe set of Atoms this extension adds support for.\nThe WM_NAME that will be set for the X server\nAdd the required hooks to manage EWMH compliance to an …\nIntercept messages from external applications and handle …\nNotify external clients of the current status of …\nAdvertise EWMH support to the X server\nPerform no additional actions when managing a new client.\nFloat clients in the center of the screen.\nFloat clients at a fixed position on the screen.\nFloat clients at a relative position to the current screen.\nMove the specified client to the named workspace.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new FloatingCentered with the given width and …\nCreate a new FloatingRelative with the given x, y, width …\nThe tag used for a placeholder Workspace that holds …\nA toggle-able client program that can be shown and hidden …\nToggle the visibility of a NamedScratchPad.\nAdd the required hooks to manage EWMH compliance to an …\nRemove destroyed clients from internal scratchpad state\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStore clients matching NamedScratchPad queries and run the …\nCreate a new named scratchpad.\nSpawn a client program on window manager startup\nCreate a new startup hook ready for adding to your Config\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new unboxed startup hook ready for adding to your …\nReplace windows matching the parent Query when they spawn …\nCreate a new window swallowing rule based on the provided …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConditionally run one of two layouts based on a predicate …\nInspired by the Fibonacci layout available for dwm: …\nInspired by the Tatami layout available for dwm: …\nCreate a new Conditional layout as with <code>new</code> but returned …\nCreate a new Fibonacci layout as with <code>new</code> but returned as …\nCreate a new Tatami layout returned as a trait object …\nCreate a new default Fibonacci layout as a trait object …\nCreate a new default Tatami layout returned as a trait …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new Conditional layout, selecting from one of …\nCreate a new Fibonacci layout with a specified cutoff for …\nCreate a new Tatami layout with the specified ratio for …\nCritical priority\nLow priority\nNormal priority\nA notification level when calling notify-send\nDebugging utilities for diagnosing issues with penrose.\nA simple wrapper for suckless’ dmenu tool for providing …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSend a notification using the <code>notify-send</code> command line …\nSend a notification using the <code>notify-send</code> command line …\nDetect the current monitor set up and arrange the monitors …\nFlag based configuration of debug printing of the current …\nUse <code>notify-send</code> to display details about the current …\nShould the focused client id (if there is one) be shown?\nShould the current screen index be shown?\nShould the focused workspace tag be shown?\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShould each stat be displayed on its own line?\nShould the total number of managed clients be shown?\nShould the number of clients expected to be mapped to the …\nSummarise the current state of the window manager as …\nA wrapper around the suckless dmenu program for creating …\nCustom configuration options for <code>DMenu</code>.\nTwo different derivatives of dmenu\nThe selected line along its line number (0 indexed)\nThe result of attempting to match against user input in a …\nThe user exited out of matching or had nothing typed\nNewer <code>dmenu-rs</code>\nSuckless’s version of dmenu\nNothing matched and this was the user’s input when they …\nBackground color for the rendered window\nRun this <code>DMenu</code> command and return the selected choice.\nAllow the user to load a custom font\nOptional prompt customization.\nForeground color for text\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nShould dmenu ignore case in the user input when matching?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecify to kind of dmenu to use\nNumber of lines to display at a time.\nCreate a new <code>DMenu</code> command which can be triggered and …\nShould dmenu treat the input as a password and render …\nUsed for launching regular old <code>DMenu</code> with no menu matching …\nSelected line background color\nShould line numbers be displayed to the user?\nShow dmenu at the bottom the the screen.\nConstruct a default config with a custom prompt\nAbove the current position\nBelow the current focus point\nAbove the current focus point\nBelow the current position\nThe current focus point\nThe first element of the stack\nLeft of the current position\nA position within a Stack.\nA relative position along the horizontal and vertical axes\nRight of the current position\nA wrapper around a single Workspace that includes the …\nA Stack can be thought of as a linked list with a hole …\nThe side-effect free internal state representation of the …\nThe last element of the stack\nA wrapper around a Stack of windows belonging to a single …\nAdd a new invisible Workspace to this StackSet.\nAdd a new Workspace to this StackSet.\nSend the given Message to every Layout in this stack …\nPass the given message on to <em>all</em> layouts available to this …\nIterate over each client in this StackSet in an arbitrary …\nAn iterator over all windows in this workspace.\nCheck whether a given element is in this Stack\nReturns <code>true</code> if the StackSet contains an element equal to …\nCheck if a given window is currently part of this workspace\nIs the given tag present in the StackSet?\nExtract a reference to the focused element of the current …\nAn immutable reference to the currently focused Screen\nAn immutable reference to the current Stack if there is one\nThe <code>tag</code> of the current Workspace\nAn immutable reference to the current Workspace\nA mutable reference to the current Workspace\nDrag the focused workspace onto the previous Screen, …\nDrag the focused workspace onto the next Screen, holding …\nExtract elements satisfying a predicate into a Vec, …\nRetain only elements which satisfy the given predicate. If …\nFlatten a Stack into a Vector, losing the information of …\nRecord a known client as floating, giving its preferred …\nAn immutable reference to the focused window for this …\nFocus the given client and set its Workspace as current …\nMove focus from the current element down the stack, …\nMove focus from the current element down the Stack, …\nAttempt to focus a given element in the Stack if it is …\nFocus the first element found matching the given predicate …\nMove focus to the element in the head position\nMove focus to the element in the head position. This is a …\nMove focus to the Workspace after the currently focused …\nMove focus to the Workspace before the currently focused …\nSet focus to the Screen with the specified index.\nSet focus to the Workspace with the specified tag.\nMove focus from the current element up the stack, wrapping …\nMove focus from the current element up the Stack, wrapping …\nReturn a reference to the focused element in this Stack\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempt to create a new Stack from this one by filtering …\nGeometry primitives\nThe physical screen size of this Screen as a Rect.\nSend the given Message to the currently active Layout.\nPass the given message on to the currently focused layout.\nCheck whether a given tag currently has any floating …\nReturn a reference to the first element in this Stack\nIterate over clients from workspaces not currently mapped …\nIterate over the currently hidden Workspace in this …\nIterate over the currently hidden Workspace in this …\nA fixed integer ID for this workspace.\nThe index of this screen.\nInsert the given element in place of the current focus, …\nInsert the given client to the current Stack in a default …\nInsert the given element at the requested position in the …\nInsert the given client to the current Stack at the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAlways false: a Stack always has at least one focused …\nWhether or not this workspace currently holds any windows\nCheck whether a given client is currently floating.\nProvide an iterator over this stack iterating over up, …\nProvide an iterator over this stack iterating over up, …\nDelete the currently focused client from this stack if …\nReturn a reference to the last element in this Stack\nThe name of the currently active layout being used by this …\nThe number of elements in this Stack.\nMap a function over all elements in this Stack, returning …\nApply a function to modify the current Stack if there is …\nApply a function to modify the current Stack if it is …\nMove the given client to the focused position of the …\nMove the given client to the focused position of the …\nMove the focused client of the current Workspace to the …\nMove the focused client of the current Workspace to the …\nCreate a new Stack specifying the focused element and and …\nCreate a new Workspace with the given layouts and stack.\nSwitch to the next available Layout on the focused …\nSwitch to the next available layout for this workspace.\nMove focus to the next Screen\nIterate over each non-hidden Workspace in this StackSet in …\nIterate over clients present in on-screen Workspaces.\nIterate over the Workspace currently displayed on a screen …\nAll Workspace tags in this StackSet order by their id that …\nAll Workspaces in this StackSet order by their id that …\nSwitch to the previous available Layout on the focused …\nSwitch to the previous available layout for this workspace.\nMove focus to the previous Screen\nFocus the requested tag on the current screen, swapping …\nRemove an element from the stack.\nDelete a client from this StackSet.\nRemove the focused element of this Stack. If this was the …\nRemove the currently focused client from this stack if …\nReverse the ordering of a Stack (up becomes down) while …\nRotate all elements of the stack back, wrapping from …\nRotate all elements of the stack back, wrapping from …\nRotate the Stack until the current focused element is in …\nRotate the Stack until the current focused element is in …\nRotate all elements of the stack forward, wrapping from …\nRotate all elements of the stack forward, wrapping from …\nRun the currently focused Layout and return the positions …\nIf the given client is currently visible on a screen …\nIterate over each Screen in this StackSet in an arbitrary …\nMutably iterate over each Screen in this StackSet in an …\nReplace the current LayoutStack with a new one, returning …\nAttempt to set the current Layout by name.\nAttempt to set the active Layout by name if it is …\nClear the floating status of a client, returning its …\nSwap the focused element with the one below, wrapping from …\nSwap the position of the focused element with one below it.\nSwap the current head element with the focused element in …\nSwap the current head element with the focused element in …\nSwap the focused element with the one above, wrapping from …\nSwap the position of the focused element with one above it.\nThe string tag for this workspace.\nFind the tag of the Workspace containing a given client. …\nFind the tag of the Workspace currently displayed on Screen…\nFind the tag of the Workspace with the given NetWmDesktop …\nIf a known client is floating, sink it and return its …\nToggle focus back to the previously focused Workspace …\nFor an iterator of at least one element, the first element …\nCreate a new StackSet of empty stacks with the given …\nIterate over the clients in this stack from the the …\nIf the current Stack is None, return <code>default</code> otherwise …\nA reference to the Workspace with a tag of <code>tag</code> if there is …\nThe Workspace current visible on this screen\nA mutable reference to the Workspace with a tag of <code>tag</code> if …\nIterate over each Workspace in this StackSet in an …\nMutably iterate over each Workspace in this StackSet in an …\nAn x,y coordinate pair\nAn X window / screen position: top left corner + extent\nAn X window / screen position: top left corner + extent as …\nSomething that can be converted into a RelativeRect by …\nApply the proportions of this RelativeRect to a given Rect.\nApply some Rect based operation to this RelativeRect by …\nSplit this <code>Rect</code> into evenly sized columns.\nSplit this <code>Rect</code> into evenly sized rows.\nCenter this Rect inside of <code>enclosing</code>.\nCheck whether this Rect contains <code>other</code> as a sub-Rect\nCheck whether this Rect contains <code>p</code>\nThe four corners of this Rect in Point form returned in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAll available space within a given Rect\nThe height of this rect\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether this Rect is physically larger than <code>other</code> …\nThe midpoint of this rectangle.\nCreate a new Point.\nCreate a new RelativeRect from the provided values.\nCreate a new Rect.\nConvert to a RelativeRect using the reference Rect\nUpdate the position of this Rect by specified deltas.\nUpdate the width and height of this Rect by specified …\nCreate a new Rect with height equal to <code>factor</code> x <code>self.h</code>\nCreate a new Rect with width equal to <code>factor</code> x <code>self.w</code>\nShrink width and height by the given pixel border, …\nDivides this rect into two rows where the first has the …\nDivide this rect into two rows where the first takes up …\nDivides this rect into two rows along its midpoint.\nDivides this rect into two columns along its midpoint.\nDivides this rect into two columns where the first has the …\nDivide this rect into two columns where the first takes up …\nThe width of this rect\nAn absolute x coordinate relative to the root window\nThe x-coordinate of the top left corner of this rect\nAn absolute y coordinate relative to the root window\nThe y-coordinate of the top left corner of this rect\nUse <code>notify-send</code> to display a message to the user\nRun a given <code>Layout</code> for a stack of n clients and print a …\nRun an external command\nRun an external command and return its output.\nRun an external command with arguments and return its …\nRun an external command with the specified command line …\nBorder color as an argb hex value\nThe border width in pixels\nA simple hidden stub window for facilitating other API …\nAttributes for an X11 client window (not all are curently …\nOn screen configuration options for X clients (not all are …\nSet the pre-defined client event mask\nSet the pre-defined client event mask for sending unmap …\nA window that receives input only (not queryable)\nA regular window. The Atom passed should be a valid _…\nAbsolute size and position on the screen as a Rect\nSet the pre-defined root event mask\nMark this window as stacking on top of its peer\nMark this window as stacking below the given Xid\nMark this window as stacking below all other windows\nMark this window as stacking above all other windows\nA window type to be specified when creating a new window …\nA handle on a running X11 connection that we can use for …\nExtended functionality for XConn impls in order to run the …\nFetch the value of all known properties for a given client …\nData types for working with X atoms\nLook up the string name of a given Atom by its Xid.\nLook up the current dimensions and position of a given …\nCheck whether or not the given client should be assigned …\nCheck to see if a given client window supports a …\nAsk the X server for the current (x, y) coordinate of the …\nDelete a property for a given client window.\nData types for working with X events\nAsk the X server for the IDs of all currently known client …\nFlush any pending events to the X server.\nSet X input focus to be held by the given client window.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLook up a specific property on a given client window.\nRequest the WindowAttributes for a given client window …\nGet the current WmState for a given client window.\nGrab the specified key and mouse states, intercepting them …\nHide a client by unmapping it and setting its WmState to …\nLook up the Xid of a given Atom name. If it is not …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKill the given client window, closing it.\nKill the focused client if there is one\nList the known property names set for a given client.\nEstablish the window manager state for the given client …\nMap the given client window to the screen with its current …\nApply a pure function that modifies a ClientSet and then …\nBlock and wait for the next event from the X server so it …\nUpdate the geometry of a given client based on the given …\nRestack and set the geometry for an ordered list of client …\nData types for working with X window properties\nQueries against client windows\nRun the provided Query, returning the result.\nRun the provided Query, returning the result or a default …\nRefresh the current X server state based on a diff of the …\nRestack the given windows in, each one above the last.\nDisplay a client on the screen by mapping it and setting …\nThe ID of the window manager root window.\nAsk the X server for the dimensions of each currently …\nSend a ClientMessage to a given client.\nUpdate the currently focused client and refresh the X …\nSet one or more ClientAttr for a given client window.\nUpdate the border color of the given client window.\nSet the ClientConfig for a given client window.\nSet the initial window properties for a newly managed …\nSet a specific property on a given client window.\nSet the current WmState for a given client window.\nRemove the window manager state for the given client …\nUnmap the given client window from the screen, hiding it.\nReposition the mouse cursor to the given (x, y) …\nWarp the mouse cursor to the center of the given screen.\nWarp the mouse cursor to the center of the given client …\nRequest a window’s PID via the _NET_WM_PID property.\nRequest the title of a given client window following …\nHandles communication with an X server via the x11rb crate.\nA pure rust based connection to the X server using a …\nGet a handle to the underlying connection.\nConversions to Penrose types from X11rb types\nCreate and map a new window to the screen with the …\nDestroy the window identified by the given <code>Xid</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruct an X11rbConnection  backed by the x11rb backend …\nClients with one of these window types will be auto floated\nA Penrose internal representation of X atoms.\nATOM\nAn iterator over the variants of Atom\nATOM_CARDINAL\nMANAGER\n_NET_ACTIVE_WINDOW\n_NET_CLIENT_LIST\n_NET_CLIENT_LIST\n_NET_CURRENT_DESKTOP\n_NET_DESKTOP_NAMES\n_NET_DESKTOP_VIEWPORT\n_NET_NUMBER_OF_DESKTOPS\n_NET_SUPPORTED\n_NET_SUPPORTING_WM_CHECK\n_NET_SYSTEM_TRAY_OPCODE\n_NET_SYSTEM_TRAY_ORIENTATION\n_NET_SYSTEM_TRAY_ORIENTATION_HORZ\n_NET_SYSTEM_TRAY_S0\n_NET_WM_WINDOW_TYPE_COMBO\n_NET_WM_WINDOW_TYPE_DESKTOP\n_NET_WM_WINDOW_TYPE_DIALOG\n_NET_WM_WINDOW_TYPE_DND\n_NET_WM_WINDOW_TYPE_DOCK\n_NET_WM_WINDOW_TYPE_DROPDOWN_MENU\n_NET_WM_WINDOW_TYPE_MENU\n_NET_WM_WINDOW_TYPE_NORMAL\n_NET_WM_WINDOW_TYPE_NOTIFICATION\n_NET_WM_WINDOW_TYPE_POPUP_MENU\n_NET_WM_WINDOW_TYPE_SPLASH\n_NET_WM_WINDOW_TYPE_TOOLBAR\n_NET_WM_WINDOW_TYPE_UTILITY\n_NET_WM_DESKTOP\n_NET_WM_NAME\n_NET_WM_STATE\n_NET_WM_STATE_DEMANDS_ATTENTION\n_NET_WM_STATE_FULLSCREEN\n_NET_WM_STATE_HIDDEN\n_NET_WM_STRUT\n_NET_WM_WINDOW_TYPE\nUTF8_STRING\nATOM_WINDOW\nWM_CLASS\nWM_DELETE_WINDOW\nWM_HINTS\nWM_NAME\nWM_NORMAL_HINTS\nWM_PROTOCOLS\nWM_STATE\nWM_TAKE_FOCUS\nWM_TRANSIENT_FOR\n_XEMBED\n_XEMBED_INFO\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEvent masks used when sending client events\nA client message that needs to be parsed and handled based …\nA message has been sent to a particular client\nThe raw data contained in a <code>ClientMessage</code>\nKnown common client message formats.\nA configure request or notification when a client changes …\nClient config has changed in some way\nA client is requesting to be repositioned\nInform a client that it is being closed\nA client window has been closed\nThe mouse pointer has entered a new client window\nA part or all of a client has become visible\nA notification that a window has become visible\nA client should have focus\nA grabbed key combination has been entered by the user\nThe mouse pointer has left the current client window\nA client window is requesting to be positioned and …\nKeybindings have changed\nThe mouse has moved while a grabbed mouse state is held\nA mouse button has been pressed or released\nNo Mask: all clients should accept\nA notification that the mouse pointer has entered or left …\nA property change on a known client\nA client property has changed in some way\nA randr action has occured (new outputs, resolution change …\nA window is requesting that it be resized\nA client is being resized\nFocus has moved to a different screen\nStructure Notify\nSubstructure Notify\nRequest that a client take input focus\nTake ownership of the systray\nSlice of u16\nSlice of u32\nSlice of u8\nA client is being unmapped\nInform an embedded window that it has gained focus\nInform an embedded window that it has been blocked by a …\nInform a window that it is being embedded\nInform an embedded window that it is now active\nWrapper around the low level X event types that correspond …\nAbsolute coordinate of the event\nBuild a default ClientMessage compatible with X11 / XCB …\nConvert this client message into a single data format\nConvert this client message into a single data format\nConvert this client message into a single data format\nConvert this client message into a single data format\nThe property that changed\nHow many following expose events are pending\nThe raw data being sent in this message\nThe data type being set\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe new height\nThe ID of the window that sent the message\nThe ID of the window that had a property changed\nThe ID of the window that has become exposed\nThe ID of the window that was entered\nThe ID of the window that had a property changed\nThe ID of the window that is being resized\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this window the root window?\nIs this window the root window?\nThe mask to use when sending the event\nTry to build a new ClientMessage. Fails if the data is …\nThe new window size\nThe current size and position of the window\nCoordinate of the event relative to top-left of the window …\nWhether or not the event window is on the same screen as …\nThe new width\nOne or more X Atoms\nRaw bytes for when the prop type is non-standard\nA cardinal number\nClass is copied from parent window\nIcon mask hint is set\nIcon pixmap hint is set\nIcon position hint is set\nIcon window hint is set\nInput hint is set\nWindow is iconified\nWindow can only be used for queries\nWindow can be displayed\nThe mapping states a window can be in\nWindow is visible\nProgram-specified min and max aspect ratios\nProgram-specified base size\nProgram-specified maximum size\nProgram-specified minimum size\nProgram-specified position\nProgram-specified resize increments\nProgram-specified size\nProgram-specified window gravity\nKnow property types that should be returnable by XConn …\nState hint is set\nUrgency hint is set\nUTF-8 encoded string data\nUser-specified x, y\nUser-specified width, height\nThe window is never viewable\nThe window is unmapped\nThe window is currently viewable\nWindow group hint is set\nAn X window IDs\nWindow Attributes honoured by penose.\nThe input class for a window\nWindow is not visible\nClient requested hints about information other than window …\nThe WmHints properties for this window\nPossible flags that can be set in a WmHints client property\nClient requested hints about window geometry.\nThe WmNormalHints properties for this window\nPossible flags that can be set in a WmNormalHints client …\nPossible valid values for setting the <code>WM_STATE</code> property on …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nApply these size hints to a given Rect.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nCreate a new instance from component parts\nCreate a new instance from component parts\nCreate a new instance from component parts\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTry to construct a WmHints instance from raw bytes.\nTry to construct a WmNormalHints instance from raw bytes.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA meta Query for combining two queries with a logical AND.\nA Query for fetching a window’s application name (the …\nA Query for fetching a window’s class name (the second …\nA meta Query for applying a logical NOT to a query.\nA meta Query for combining two queries with a logical OR.\nA query to be run against client windows for identifying …\nA Query for fetching a string property from a client …\nA Query for fetching a window’s title following ICCCM / …\nCombine this query with another query using a logical AND.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApply a logical NOT to this query.\nCombine this query with another query using a logical OR.\nRun this query for a given window ID.")